<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PSModuleDevelopment</name>
    </assembly>
    <members>
        <member name="T:PSModuleDevelopment.Format.Column">
            <summary>
            A column in a format table definition
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Column.PropertyName">
            <summary>
            The name to select a property by. Ignored if a scriptblock is set.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Column.ScriptBlock">
            <summary>
            A scriptblock to determine column content at runtime
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Column.Label">
            <summary>
            The label to apply to the column
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Column.Width">
            <summary>
            Total width of the column. Anything less than one will be ignored.
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Format.Column.SortableName">
            <summary>
            Name to show and sort with. Used for sorting and to explicitly assign positions.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Column.Alignment">
            <summary>
            How to align the text.
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Format.Column.TextHeader">
            <summary>
            The text to use in the definition's header
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Format.Column.TextBody">
            <summary>
            The text to use in the definition's body
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Format.Column.CompareTo(System.Object)">
            <summary>
            Compares one column with another
            </summary>
            <param name="Item">The item to compare the current one with</param>
            <returns>-1, 0 or 1</returns>
        </member>
        <member name="T:PSModuleDevelopment.Format.Alignment">
            <summary>
            The way text can be oriented
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Alignment.None">
            <summary>
            No alignment implies the property being not set. Instead, it will use the datatype default orientation.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Alignment.Left">
            <summary>
            Text is oriented to the left
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Alignment.Center">
            <summary>
            Text is centered
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Alignment.Right">
            <summary>
            Text is oriented to the right
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Alignment.Undefined">
            <summary>
            There was no alignment specified. Used to not apply changes during transformation
            </summary>
        </member>
        <member name="T:PSModuleDevelopment.Format.ColumnTransformation">
            <summary>
            A set of transformation rules that determine, wheter a column needs to be updated
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.ColumnTransformation.FilterViewName">
            <summary>
            A filter rule, based on the name of the view
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.ColumnTransformation.FilterColumnName">
            <summary>
            A filter rule, based on the name of the column
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.ColumnTransformation.Append">
            <summary>
            Whether the rule should be added as an additional property, if no matching ColumName was found.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.ColumnTransformation.ScriptBlock">
            <summary>
            A scriptblock to determine column content at runtime
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.ColumnTransformation.Label">
            <summary>
            The label to apply to the column
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.ColumnTransformation.Width">
            <summary>
            Total width of the column. Anything less than one will be ignored.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.ColumnTransformation.Alignment">
            <summary>
            How to align the text.
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Format.ColumnTransformation.#ctor">
            <summary>
            Empty constructor for manual assembly
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Format.ColumnTransformation.#ctor(System.Collections.Hashtable)">
            <summary>
            Hashtable constructor, in order to automatically convert&amp;understand input
            </summary>
            <param name="Table">The hashtable to parse</param>
        </member>
        <member name="M:PSModuleDevelopment.Format.ColumnTransformation.Apply(PSModuleDevelopment.Format.Column)">
            <summary>
            Applies changes to column
            </summary>
            <param name="Item">The column to affect</param>
        </member>
        <member name="T:PSModuleDevelopment.Format.Document">
            <summary>
            A format document. Should be written to a *.Format.ps1xml format.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Document.Name">
            <summary>
            Name of the document. Purely cosmetic in nature.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.Document.Views">
            <summary>
            List of views stored in this document.
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Format.Document.Text">
            <summary>
            The XML definition of this format document
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Format.Document.ToString">
            <summary>
            Returns the string representation of the format XML
            </summary>
            <returns>The string representation of the format XML</returns>
        </member>
        <member name="T:PSModuleDevelopment.Format.TableDefinition">
            <summary>
            A Format Table definition
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.TableDefinition.Autosize">
            <summary>
            Whether to automatically size the column width
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.TableDefinition.Columns">
            <summary>
            List of columns to 
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Format.TableDefinition.TextDefinition">
            <summary>
            The string representation of a format table fragment.
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Format.TableDefinition.SetColumnOrder(System.String[])">
            <summary>
            Sets the columns to this specified order, using the SortableName property to assign.
            Not listed properties will be moved to the end of the list.
            </summary>
            <param name="Names">The names to sort by</param>
        </member>
        <member name="M:PSModuleDevelopment.Format.TableDefinition.TransformColumn(PSModuleDevelopment.Format.ColumnTransformation)">
            <summary>
            Applies a transformation rule to the columns stored in this view
            </summary>
            <param name="Transform">The transformation rule to apply</param>
        </member>
        <member name="M:PSModuleDevelopment.Format.TableDefinition.ToString">
            <summary>
            The default string representation of a tableview format definition
            </summary>
            <returns>The default string representation of a tableview format definition</returns>
        </member>
        <member name="T:PSModuleDevelopment.Format.ViewDefinitionBase">
            <summary>
            Base class for format definitions
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.ViewDefinitionBase.Name">
            <summary>
            The name of the definition
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.ViewDefinitionBase.ViewSelectedByType">
            <summary>
            The typenames selected by
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Format.ViewDefinitionBase.ViewSelectedBySet">
            <summary>
            The selectionset to select by
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Format.ViewDefinitionBase.TextDefinition">
            <summary>
            The string representation. Must be overridden by all implementing classes.
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Format.ViewDefinitionBase.ToString">
            <summary>
            The string representation. Must be overridden by all implementing classes.
            </summary>
            <returns>The format string to produce for the format file.</returns>
        </member>
        <member name="M:PSModuleDevelopment.Format.ViewDefinitionBase.CompareTo(System.Object)">
            <summary>
            Implement IComparable
            </summary>
            <param name="Item">The item to compare the current instance with</param>
            <returns>1, 0 or -1</returns>
        </member>
        <member name="T:PSModuleDevelopment.PsmdAssembly.Constructor">
            <summary>
            Class containing information about a class's constructor
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.PsmdAssembly.Constructor.Type">
            <summary>
            The type the constructor is part of
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.PsmdAssembly.Constructor.Definition">
            <summary>
            The constructor definition
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.PsmdAssembly.Constructor.Public">
            <summary>
            Whether the constructor is public
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.PsmdAssembly.Constructor.Parameters">
            <summary>
            The actual parameters of the constructor
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.PsmdAssembly.Constructor.ConstructorItem">
            <summary>
            The actual constructor object
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.PsmdAssembly.Constructor.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new constructor object, designed for display in PowerShell
            </summary>
            <param name="Info">The constructor info object describing the constructor</param>
        </member>
        <member name="T:PSModuleDevelopment.Template.Parameter.ParameterBase">
            <summary>
            Base class for all kinds of parameters gen 2+
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ParameterBase.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ParameterBase.Description">
            <summary>
            Description of the parameter
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Template.Parameter.ParameterBase.GetValue">
            <summary>
            Get the value associated with this parameter
            </summary>
            <returns>The value to insert into the artifact generated from the template</returns>
        </member>
        <member name="T:PSModuleDevelopment.Template.Parameter.ParameterPrompt">
            <summary>
            A template parameter where the user is prompted for input.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ParameterPrompt.Value">
            <summary>
            The value provided by the user
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ParameterPrompt.ValidateSet">
            <summary>
            List of legal values to provide
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ParameterPrompt.ValidatePattern">
            <summary>
            A validation pattern that needs to be met.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ParameterPrompt.PatternError">
            <summary>
            An error description that will be shown if the user provides invalid input to a parameter with pattern validation.
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Template.Parameter.ParameterPrompt.TestValue(System.String)">
            <summary>
            Test whether the input meets the validation rules
            </summary>
            <param name="Value">The value to test</param>
            <returns>Whether the value is valid.</returns>
        </member>
        <member name="M:PSModuleDevelopment.Template.Parameter.ParameterPrompt.GetValue">
            <summary>
            Return the value specified by the user.
            </summary>
            <returns>The value specified by the user</returns>
        </member>
        <member name="T:PSModuleDevelopment.Template.Parameter.ParameterScript">
            <summary>
            Parameter type executing 
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Template.Parameter.ParameterScript.ScriptBlock">
            <summary>
            The scriptblock to execute.
            Wrapped as string for serialization purposes.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ParameterScript.Value">
            <summary>
            The value of the scriptblock.
            Populated by the GetValue() method usually called with the "StartUp" timing.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ParameterScript.Timing">
            <summary>
            When exactly during the template process should this scriptblock be executed?
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ParameterScript.SkipInsert">
            <summary>
            Setting this to true will cause the Invoke-PSMDTemplate command to omit inserting values for the 
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Template.Parameter.ParameterScript.GetValue">
            <summary>
            Returns the string value of the scriptblock by executing it!
            </summary>
            <returns>The string value of the scriptblock by executing it!</returns>
        </member>
        <member name="M:PSModuleDevelopment.Template.Parameter.ParameterScript.GetInTimeValue(System.IO.FileSystemInfo)">
            <summary>
            Execute the scriptblock "Just-in-time" during either PreItemCreation or PostItemCreation Timing.
            </summary>
            <param name="Info">The file/directory info object of the object recently or about to be created</param>
            <returns>Returns a string value resulting from the scriptblock to insert</returns>
        </member>
        <member name="M:PSModuleDevelopment.Template.Parameter.ParameterScript.GetInTimeValue(System.String,System.Boolean)">
            <summary>
            Execute the scriptblock "Just-in-time" during either PreItemCreation or PostItemCreation Timing.
            </summary>
            <param name="Path">The path to the file/directory info object of the object recently or about to be created</param>
            <param name="IsFile">Whether the object (about to be) created is a file.</param>
            <returns>Returns a string value resulting from the scriptblock to insert</returns>
        </member>
        <member name="T:PSModuleDevelopment.Template.Parameter.ScriptExecutionTime">
            <summary>
            When will a specific scriptblock parameter be executed?
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ScriptExecutionTime.StartUp">
            <summary>
            Executed when starting the overall template invocation
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ScriptExecutionTime.PreItemCreation">
            <summary>
            Executed before an individual item using it is created.
            Values will be inserted into the file-content before writing to disk if applicable.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ScriptExecutionTime.PostItemCreation">
            <summary>
            Executed after the individual item using it has been created.
            Output will be discarded, but scriptblock will receive path of file / folder.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Parameter.ScriptExecutionTime.Conclusion">
            <summary>
            Executed after the entire project has been written.
            Enables post-processing.
            </summary>
        </member>
        <member name="T:PSModuleDevelopment.Template.ParameterScript">
            <summary>
            A script used to calculate content to be inserted
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.ParameterScript.Name">
            <summary>
            Name of the scriptblock (auto-assigned or specified)
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.ParameterScript.ScriptBlock">
            <summary>
            The scriptblock to invoke
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Template.ParameterScript.StringScript">
            <summary>
            Direct string representation of the scriptblock.
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Template.ParameterScript.#ctor">
            <summary>
            Creates an empty parameter script. Usually used in serialization.
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Template.ParameterScript.#ctor(System.String,System.Management.Automation.ScriptBlock)">
            <summary>
            Creates a prefilled paramter script. Usually used when creating templates
            </summary>
            <param name="Name">The name of the parameter. This is used to insert it into individual files or file names.</param>
            <param name="ScriptBlock"></param>
        </member>
        <member name="M:PSModuleDevelopment.Template.ParameterScript.#ctor(System.Management.Automation.PSObject)">
            <summary>
            Creates a prefilled parameter script. Usually used in fixing serialization the hard way.
            </summary>
            <param name="Item">The deserialized ParameterScript item</param>
        </member>
        <member name="T:PSModuleDevelopment.Template.Store">
            <summary>
            Class containing information relating to where templates are stored
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Store.Name">
            <summary>
            The name of the store
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Store.Path">
            <summary>
            The path the store is pointed to
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Template.Store.Directory">
            <summary>
            A directory information wrapper to more easily manipulate it
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Template.Store.Exists">
            <summary>
            Whether the diretory already exists
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Template.Store.Ensure">
            <summary>
            Ensures the store actually exists
            </summary>
            <returns>True if it worked, false otherwise</returns>
        </member>
        <member name="T:PSModuleDevelopment.Template.Template">
            <summary>
            The master class containing a template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Name">
            <summary>
            The name of the template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Type">
            <summary>
            What kind of template is this?
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Version">
            <summary>
            What version is the template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Description">
            <summary>
            Text describing the template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Author">
            <summary>
            Author of the template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.CreatedOn">
            <summary>
            When was the template originally created?
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Tags">
            <summary>
            List of tags that have been assigned to the template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Parameters">
            <summary>
            List of parameters the template accepts
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Scripts">
            <summary>
            List of scripts that will be invoked on initialization
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Parameters2">
            <summary>
            List of generation 2 parameters to include
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Children">
            <summary>
            Items in the root directory of the template (which may contain children themselves).
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.Template.Generation">
            <summary>
            What design generation is the template?
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Template.Template.ToTemplateInfo">
            <summary>
            Returns the template digest used as index file.
            </summary>
            <returns>A TemplateInfo object describing this template.</returns>
        </member>
        <member name="M:PSModuleDevelopment.Template.Template.#ctor">
            <summary>
            Create a blank template object
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Template.Template.#ctor(System.Management.Automation.PSObject)">
            <summary>
            Create a template object based on a deserialized template object
            </summary>
            <param name="Item">The deserialized tample object to restore</param>
            <exception cref="T:System.ArgumentException">If anything at all is not as it should be.</exception>
        </member>
        <member name="T:PSModuleDevelopment.Template.TemplateHost">
            <summary>
            Static helpers for the template system
            </summary>
        </member>
        <member name="T:PSModuleDevelopment.Template.TemplateInfo">
            <summary>
            Class containing meta information about a template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.Name">
            <summary>
            The name of the template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.Type">
            <summary>
            What kind of template is this?
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.Version">
            <summary>
            What version is the template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.Description">
            <summary>
            Text describing the template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.Author">
            <summary>
            Author of the template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.CreatedOn">
            <summary>
            When was the template originally created?
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.Tags">
            <summary>
            List of tags that have been assigned to the template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.Parameters">
            <summary>
            List of parameters the template accepts
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.Store">
            <summary>
            The store the template is stored in.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.Path">
            <summary>
            The path to the template file
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateInfo.Generation">
            <summary>
            What template generation is this file?
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Template.TemplateInfo.ToString">
            <summary>
            The version-qualified name of the template
            </summary>
            <returns>The version-qualified name of the template</returns>
        </member>
        <member name="T:PSModuleDevelopment.Template.TemplateItemBase">
            <summary>
            Base class for all files &amp; folders that can be part of a template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateItemBase.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateItemBase.RelativePath">
            <summary>
            The full path from the project root
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateItemBase.Identifier">
            <summary>
            The string sequence used to identify variables in this file
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateItemBase.FileSystemParameterFlat">
            <summary>
            List of flat string insertion parameters for the filesystem object's name
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateItemBase.FileSystemParameterScript">
            <summary>
            List of script value insertion parameters for the filesystem object's name
            </summary>
        </member>
        <member name="T:PSModuleDevelopment.Template.TemplateItemFile">
            <summary>
            Describes a file that is part of a template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateItemFile.Value">
            <summary>
            The value of the file. May contain plaintext UTF8 in cases of script files or similar text files. Base64 Encoded string in case of binary files.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateItemFile.PlainText">
            <summary>
            Whether the file is interpreted as plain text. If not, it will be assumed to be a Base64 encoded binary file.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateItemFile.ContentParameterFlat">
            <summary>
            List of flat string insertion parameters for the plaintext file
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateItemFile.ContentParameterScript">
            <summary>
            List of script value insertion parameters for the plaintext file
            </summary>
        </member>
        <member name="T:PSModuleDevelopment.Template.TemplateItemFolder">
            <summary>
            Describes a folder that is part of a template
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateItemFolder.Children">
            <summary>
            Items under the current item.
            </summary>
        </member>
        <member name="T:PSModuleDevelopment.Template.TemplateResult">
            <summary>
            The result object of a template invokation item.
            A project template will generate one such object per file/folder
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateResult.Name">
            <summary>
            Name of the file or folder
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateResult.Path">
            <summary>
            Path the file or folder should be written to
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateResult.FullPath">
            <summary>
            The full, resolved path of the item
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateResult.Content">
            <summary>
            Any content to write (only viable for files)
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateResult.IsFolder">
            <summary>
            Whether the item to create is a folder or a file
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateResult.IsText">
            <summary>
            Whether the file is a text-file.
            If false, it will be written as a binary file instead.
            </summary>
        </member>
        <member name="T:PSModuleDevelopment.Template.TemplateType">
            <summary>
            Is the template a single file or a project?
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateType.File">
            <summary>
            The template consists of a single file
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Template.TemplateType.Project">
            <summary>
            The template consists of multiple files
            </summary>
        </member>
        <member name="T:PSModuleDevelopment.Utility.LinesOfCode">
            <summary>
            The lines of code in a scanned script
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.LinesOfCode.Count">
            <summary>
            The number of lines found
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.LinesOfCode.Path">
            <summary>
            The path to the file that was scanned
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.LinesOfCode.Success">
            <summary>
            Whether the file could be successfully scanned
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.LinesOfCode.Lines">
            <summary>
            The individual lines that contained code
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.LinesOfCode.Ast">
            <summary>
            The ast of the script that was scanned
            </summary>
        </member>
        <member name="T:PSModuleDevelopment.Utility.PropertySearchResult">
            <summary>
            The result object returned by Search-PSMDPropertyValue
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Utility.PropertySearchResult.Path">
            <summary>
            Path notation on nested properties
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.PropertySearchResult.Name">
            <summary>
            The name of the property found
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Utility.PropertySearchResult.FullName">
            <summary>
            The full name of the property
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.PropertySearchResult.PathElements">
            <summary>
            Individual property names on a found nested property.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.PropertySearchResult.Value">
            <summary>
            The actual value found
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Utility.PropertySearchResult.Type">
            <summary>
            The type of the value found
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Utility.PropertySearchResult.Depth">
            <summary>
            How deeply nested was the property found.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.PropertySearchResult.InputObject">
            <summary>
            The original input object
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Utility.PropertySearchResult.#ctor">
            <summary>
            Creates an empty object. Only used for serialization support.
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Utility.PropertySearchResult.#ctor(System.String,System.String[],System.Object,System.Object)">
            <summary>
            Creates a full report object from using Search-PSMDPropertyValue
            </summary>
            <param name="Name">The name of the property</param>
            <param name="PathElements">The path elements if it is a nested property</param>
            <param name="Value">The actual value found</param>
            <param name="InputObject">The original input object offered to the command.</param>
        </member>
        <member name="T:PSModuleDevelopment.Utility.PSObjectExtension">
            <summary>
            Extends the PSObject with C# convenience
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Utility.PSObjectExtension.GetValue``1(System.Management.Automation.PSObject,System.String)">
            <summary>
            Get the value!
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="PSObject">The object to extend</param>
            <param name="Name">The name of the property that has the value</param>
            <returns>The value</returns>
        </member>
        <member name="M:PSModuleDevelopment.Utility.PSObjectExtension.GetValues(System.Management.Automation.PSObject,System.String)">
            <summary>
            Get the Values!
            Always as an arraylist, empty if null
            </summary>
            <param name="PSObject">The object to extend</param>
            <param name="Name">>The name of the property that has the values</param>
            <returns>The values</returns>
        </member>
        <member name="M:PSModuleDevelopment.Utility.PSObjectExtension.GetParameterScriptDictionary(System.Management.Automation.PSObject,System.String)">
            <summary>
            Get a hashtable value!
            </summary>
            <typeparam name="T">The type of the values in hashtable</typeparam>
            <param name="PSObject">The object to extend</param>
            <param name="Name">The name of the property that has the hashtable</param>
            <returns>The hashtable!</returns>
        </member>
        <member name="T:PSModuleDevelopment.Utility.TextAlignment">
            <summary>
            What a text can be aligned to
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextAlignment.Left">
            <summary>
            The text should be left-aligned
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextAlignment.Center">
            <summary>
            The text should be centered
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextAlignment.Right">
            <summary>
            The text should be right aligned
            </summary>
        </member>
        <member name="T:PSModuleDevelopment.Utility.TextHeader">
            <summary>
            Object containing information 
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Utility.TextHeader.Text">
            <summary>
            The text of the header
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Utility.TextHeader.LinesOfText">
            <summary>
            The number of lines the header text has
            </summary>
        </member>
        <member name="P:PSModuleDevelopment.Utility.TextHeader.WidthOfText">
            <summary>
            The maximum width any line of text has.
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.CornerLT">
            <summary>
            The symbol of the left top corner
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.CornerRT">
            <summary>
            The symbol of the right top corner
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.CornerLB">
            <summary>
            The symbol of the left bottom corner
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.CornerRB">
            <summary>
            The symbol of the right bottom corner
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.BorderRight">
            <summary>
            The symbol of the right border
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.BorderLeft">
            <summary>
            The symbol of the left border
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.BorderTop">
            <summary>
            The symbol of the top border
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.BorderBottom">
            <summary>
            The symbol of the bottom border
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.MaxWidth">
            <summary>
            Whether the header should be as wide as the window running the code
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.Width">
            <summary>
            How wide should the header be, if it isn't set to max. Anything shorter than the text width will be ignored
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.TextAlignment">
            <summary>
            How the text should be aligned within the header
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.TextHeader.Padding">
            <summary>
            Whether the text should be padded on the side it is aligned to
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Utility.TextHeader.#ctor(System.String)">
            <summary>
            Creates a new header around the specified string
            </summary>
            <param name="Text">The string to put in a header</param>
        </member>
        <member name="M:PSModuleDevelopment.Utility.TextHeader.ToString">
            <summary>
            Converts the header into its string representation
            </summary>
            <returns>The header text to use whereever said header is needed.</returns>
        </member>
        <member name="T:PSModuleDevelopment.Utility.UtilityHost">
            <summary>
            Host class, containing statics in support of the utility namespace
            </summary>
        </member>
        <member name="F:PSModuleDevelopment.Utility.UtilityHost.RawUI">
            <summary>
            Gives access to the host UI, in order to access window information
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Utility.UtilityHost.IsLike(System.String,System.String,System.Boolean)">
            <summary>
            Implement's VB's Like operator logic.
            </summary>
        </member>
        <member name="M:PSModuleDevelopment.Utility.UtilityHost.CharListToSet(System.String)">
            <summary>
            Converts a string of characters to a HashSet of characters. If the string
            contains character ranges, such as A-Z, all characters in the range are
            also added to the returned set of characters.
            </summary>
            <param name="charList">Character list string</param>
        </member>
        <member name="M:PSModuleDevelopment.Utility.UtilityHost.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replace a value in a string with another.
            Extends the default c# String.Replace with the capability to be case-insensitive.
            </summary>
            <param name="String">The string to modify</param>
            <param name="OldString">The value to look for and replace with someting else</param>
            <param name="NewString">The value to insert where you found the previous value. Leave empty to just delete the original value.</param>
            <param name="CaseSensitive">Whether to be case sensitive in your replacement. Defaults to false, this being PowerShell</param>
            <returns>The original string, with all instances of the looked for value replaced with the new value.</returns>
        </member>
    </members>
</doc>
